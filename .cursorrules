- This is a fictional e-commerce website for a handmade plush toy brand called "Luma Plushies".
- The design should be warm, playful, and inviting, using soft colors like pastel yellow, baby blue, and light pink.
- Use React (with Vite) and Tailwind CSS for the frontend.
- Structure the app into reusable components (Navbar, Footer, ProductCard, CategorySection, etc.).
- Pages should include: Home, About, Shop, Product Details, Cart, and Contact.
- Home page should include a hero section with a short tagline, a featured categories section, a carousel of bestsellers, and a brief "Why choose us?" section.
- The Shop page should display a grid of products, each showing an image, name, price, and an "Add to Cart" button.
- The Product Details page should include multiple product images, a description, material info, and dummy customer reviews.
- The Cart page should list selected products with quantity selectors, subtotal calculation, and a simple checkout form.
- Use dummy data for products, reviews, and categories.
- Routing should be handled using React Router.
- Keep code clean, readable, and well-commented.
- Use functional components and React hooks.
- Ensure the layout is fully responsive and optimized for mobile devices.
- Use placeholder images from Unsplash, Pexels, or Lorem Picsum.
- Animate transitions where possible using Framer Motion or similar.
- The overall vibe should feel cozy and child-friendly, avoiding harsh or high-contrast colors.

Mobile-First Design:
Always design and implement for mobile screens first, then scale up to larger screens.
Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:) to adjust layouts for different screen sizes.

Consistent Design System:
Create a design system with consistent colors, typography, spacing, and component styles.
Utilize Tailwind's configuration file (tailwind.config.js) to define your custom design tokens.

Performance Optimization:
Use React.lazy() and Suspense for code-splitting and lazy-loading components.
Implement virtualization for long lists using libraries like react-window.
Optimize images and use next/image for automatic image optimization in Next.js.

Responsive Typography:
Use Tailwind's text utilities with responsive prefixes to adjust font sizes across different screens.
Consider using a fluid typography system for seamless scaling.

Accessibility:
Ensure proper color contrast ratios using Tailwind's text-_ and bg-_ classes.
Use semantic HTML elements and ARIA attributes where necessary.
Implement keyboard navigation support.

Touch-Friendly UI:
Make interactive elements (buttons, links) at least 44x44 pixels for easy tapping.
Implement touch gestures for common actions (swipe, pinch-to-zoom) where appropriate.

- Organize components inside a 'src/components' folder. Use separate files for each component.
- Place page files inside 'src/pages' directory. Name files clearly (e.g., Home.jsx, Shop.jsx, etc.).
- Store reusable data (e.g., product list, categories, testimonials) inside 'src/data'.
- Use 'src/assets' folder for images and other static files.
- All import paths should be relative and clean (e.g., import Navbar from '../components/Navbar').
- Use absolute imports by configuring Vite aliases like '@components', '@pages', '@data', and '@assets' for cleaner imports.
- If using Vite, configure alias in `vite.config.js` as:
  ```js
  resolve: {
    alias: {
      '@components': '/src/components',
      '@pages': '/src/pages',
      '@data': '/src/data',
      '@assets': '/src/assets',
    }
  }
  ```
